/* Copyright (c) 2015-2016 MIT 6.005 course staff, all rights reserved.
 * Redistribution of original or derived work requires permission of course staff.
 */
package P1.poet;

import java.io.File;
import java.io.IOException;
import java.util.*;

import P1.graph.Graph;

/**
 * A graph-based poetry generator.
 *
 * <p>GraphPoet is initialized with a corpus of text, which it uses to derive a
 * word affinity graph.
 * Vertices in the graph are words. Words are defined as non-empty
 * case-insensitive strings of non-space non-newline characters. They are
 * delimited in the corpus by spaces, newlines, or the ends of the file.
 * Edges in the graph count adjacencies: the number of times "w1" is followed by
 * "w2" in the corpus is the weight of the edge from w1 to w2.
 *
 * <p>For example, given this corpus:
 * <pre>    Hello, HELLO, hello, goodbye!    </pre>
 * <p>the graph would contain two edges:
 * <ul><li> ("hello,") -> ("hello,")   with weight 2
 *     <li> ("hello,") -> ("goodbye!") with weight 1 </ul>
 * <p>where the vertices represent case-insensitive {@code "hello,"} and
 * {@code "goodbye!"}.
 *
 * <p>Given an input string, GraphPoet generates a poem by attempting to
 * insert a bridge word between every adjacent pair of words in the input.
 * The bridge word between input words "w1" and "w2" will be some "b" such that
 * w1 -> b -> w2 is a two-edge-long path with maximum-weight weight among all
 * the two-edge-long paths from w1 to w2 in the affinity graph.
 * If there are no such paths, no bridge word is inserted.
 * In the output poem, input words retain their original case, while bridge
 * words are lower case. The whitespace between every word in the poem is a
 * single space.
 *
 * <p>For example, given this corpus:
 * <pre>    This is a test of the Mugar Omni Theater sound system.    </pre>
 * <p>on this input:
 * <pre>    Test the system.    </pre>
 * <p>the output poem would be:
 * <pre>    Test of the system.    </pre>
 *
 * <p>PS2 instructions: this is a required ADT class, and you MUST NOT weaken
 * the required specifications. However, you MAY strengthen the specifications
 * and you MAY add additional methods.
 * You MUST use Graph in your rep, but otherwise the implementation of this
 * class is up to you.
 */
public class GraphPoet {
    
    private final Graph<String> graph = Graph.empty();
    
    // Abstraction function:
    //   The graph represent the word graph generated by corpus
    // Representation invariant:
    //   true

    /**
     * Create a new poet with the graph from corpus (as described above).
     * 
     * @param corpus text file from which to derive the poet's affinity graph
     * @throws IOException if the corpus file cannot be found or read
     */
    public GraphPoet(File corpus) throws IOException {
        // 获得corpus
        Scanner scanner = new Scanner(corpus);

        List<String> corpusList = new ArrayList<>();

        while (scanner.hasNext()) {
            corpusList.add(scanner.nextLine().toLowerCase());
        }

        // 解析
        for (String corpusString : corpusList) {
            List<String> splitWords = Arrays.asList(corpusString.split("\\s"));     // 分割
            Iterator<String> iterator = splitWords.iterator();         // 使用迭代器来逐个获取要添加的单词
            String fWord = iterator.next();         // 记录第一个单词，作为source单词
            while (iterator.hasNext()) {
                // 有下一个时
                String nWord = iterator.next();     // target单词
                int old = graph.set(fWord, nWord, 1);
                if (old != 0) {
                    graph.set(fWord, nWord, old + 1);
                }
                fWord = nWord;              // 刚才的target变成source
            }
        }

//        System.out.println(graph.toString());
    }
    
    // checkRep
    private void checkRep() { }
    
    /**
     * Generate a poem.
     * 
     * @param input string from which to create the poem
     * @return poem (as described above)
     */
    public String poem(String input) {
//        ConcreteEdgesGraph myGraph = (ConcreteEdgesGraph) graph;
        List<String> poem = new ArrayList<>();

        List<String> inputWordList = Arrays.asList(input.split("\\s"));     // 分割

        int size = inputWordList.size();

        if (size == 0) return input;

        // size != 0
        String fWord = inputWordList.get(0);    // 获得第一个单词
        poem.add(fWord);

        Set<String> vertexes = graph.vertices();    // 获得图的全部顶点

        for (int index = 1; index < size; index++) {
            fWord = fWord.toLowerCase();

            String currentWord = inputWordList.get(index);



            if (vertexes.contains(currentWord.toLowerCase()) && vertexes.contains(fWord)) {
                // 顶点包含当前的单词，要寻找加入到poem中的所有单词
                // 获得与当前单词相连的单词
                Map<String, Integer> middleWordsMapFromStartWord = graph.targets(fWord);
                Map<String, Integer> middleWordsMapFromEndWord = graph.sources(currentWord.toLowerCase());

                Set<String> map2Set = middleWordsMapFromEndWord.keySet();

                int maxWeight = 0;
                String maxWeightWord = null;

                // 接下来获得这两个map的key重合的部分，就说明是可能要加入poem的

                // 遍历第一个map的keySet
                for (String map1Key : middleWordsMapFromStartWord.keySet()) {
                    if (map2Set.contains(map1Key)) {
                        // 第二个map的set包含了第一个的key，说明map1Key是重合的部分，计算两个边权的和，和最大的边权比较
                        int currentWeight = middleWordsMapFromStartWord.get(map1Key) + middleWordsMapFromEndWord.get(map1Key);
                        if (currentWeight > maxWeight) {
                            maxWeight = currentWeight;
                            maxWeightWord = map1Key;
                        }
                    }
                }
                // 如果maxWeightWord是null，说明没有重合的部分，舍弃
                if (maxWeightWord != null) {
                    poem.add(maxWeightWord);
                }
            }


            poem.add(currentWord);
            fWord = currentWord;
        }

        StringBuilder sb = new StringBuilder();

        Iterator<String> iterator = poem.iterator();
        while (iterator.hasNext()) {
            String word = iterator.next();
            sb.append(word);
            if (iterator.hasNext()) {
                sb.append(" ");
            }
        }


//        sb.append(sign);

        return sb.toString();
    }

    @Override
    public String toString() {
        return this.graph.toString();
    }
}
